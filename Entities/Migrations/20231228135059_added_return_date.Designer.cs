// <auto-generated />
using System;
using Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Entities.Migrations
{
    [DbContext(typeof(ProgramDbContext))]
    [Migration("20231228135059_added_return_date")]
    partial class added_return_date
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Entities.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Author")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<bool>("Reserved")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Tags")
                        .HasColumnType("longtext");

                    b.HasKey("BookId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            Author = "Author1",
                            Description = "Description1",
                            Name = "Book1",
                            Reserved = false,
                            Tags = "[\"Tag1\",\"Tag2\"]"
                        },
                        new
                        {
                            BookId = 2,
                            Author = "Author2",
                            Description = "Description2",
                            Name = "Book2",
                            Reserved = false,
                            Tags = "[\"Tag3\",\"Tag4\"]"
                        });
                });

            modelBuilder.Entity("Entities.BookCheckout", b =>
                {
                    b.Property<int>("CheckoutId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("CheckoutDate")
                        .HasColumnType("date");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateOnly>("ReturnDate")
                        .HasColumnType("date");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("CheckoutId");

                    b.HasIndex("BookId");

                    b.ToTable("BookCheckouts");

                    b.HasData(
                        new
                        {
                            CheckoutId = 1,
                            BookId = 1,
                            CheckoutDate = new DateOnly(2023, 1, 1),
                            FullName = "John Doe",
                            PhoneNumber = "123456789",
                            PostalCode = "12345",
                            ReturnDate = new DateOnly(1, 1, 1),
                            UserName = "user1"
                        },
                        new
                        {
                            CheckoutId = 2,
                            BookId = 2,
                            CheckoutDate = new DateOnly(2023, 1, 2),
                            FullName = "Nick Pro",
                            PhoneNumber = "987654321",
                            PostalCode = "54321",
                            ReturnDate = new DateOnly(1, 1, 1),
                            UserName = "user2"
                        });
                });

            modelBuilder.Entity("Entities.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("longtext");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext");

                    b.HasKey("CommentId");

                    b.HasIndex("BookId");

                    b.ToTable("Comment");

                    b.HasData(
                        new
                        {
                            CommentId = 1,
                            BookId = 1,
                            Text = "Great book!",
                            UserName = "user1"
                        },
                        new
                        {
                            CommentId = 2,
                            BookId = 2,
                            Text = "Interesting read.",
                            UserName = "user2"
                        });
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "user1@example.com",
                            Password = "password",
                            UserName = "user1",
                            UserType = 0
                        },
                        new
                        {
                            UserId = 2,
                            Email = "user2@example.com",
                            Password = "password",
                            UserName = "user2",
                            UserType = 1
                        });
                });

            modelBuilder.Entity("Entities.BookCheckout", b =>
                {
                    b.HasOne("Entities.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("Entities.Comment", b =>
                {
                    b.HasOne("Entities.Book", "Book")
                        .WithMany("Comments")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("Entities.Book", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
